{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Our agenda for today's workshop is an exploration into the transformative ecosystem of Kubernetes, Tekton, and ArgoCD, all deployed on the robust infrastructure of Equinix Metal. This workshop is designed to be hands-on. So, feel free to follow along by getting your hands dirty throughout the process. Our goal is to provide an opportunity for you to gain practical experience with these wonderful technologies, and to showcase the integration of these with Equinix Metal. </p>"},{"location":"#about-the-workshop","title":"About the workshop","text":"<p>In this interactive workshop, our primary focus is to harness the capabilities of Tekton and ArgoCD. Tekton, an open-source platform, empowers developers to construct flexible CI/CD systems directly within Kubernetes. On the other hand, ArgoCD, a GitOps continuous delivery tool, allows automatic synchronization and deployment of application updates from Git repositories to the production environment.</p> <p>We will begin with provisioning Kubernetes on Equinix Metal, utilizing the Cluster API. Subsequently, we will guide you on setting up Metallb Load Balancer, a key step to ensure your application's external IP exposure.</p> <p>Next, we'll dive into setting up ArgoCD, leveraging kustomize for declarative GitOps, and Tekton for Continuous Integration and Continuous Deployment. Additionally, we will demonstrate the implementation of Pipelines as Code, making the whole process as automated as possible for least effort in maintaining the CI/CD and focusing on your core application development.</p>"},{"location":"#workshop-agenda","title":"Workshop agenda","text":"<p>The workshop is split in a structured format, divided into three key parts:</p> <p>Setup &amp; Provisioning: This phase will guide you through the process of setting up and provisioning the environment, specifically focusing on provisioning Kubernetes on Equinix Metal with the help of Cluster API. Application Deployment: In this segment, we will direct you through the application deployment process, spotlighting the functionalities of Tekton and ArgoCD. Conclusion: This final part will wrap up our workshop, providing a comprehensive summary of our journey, achievements, and the knowledge you've gained from this session.</p>"},{"location":"parts/conclusion/","title":"Conclusion","text":""},{"location":"parts/conclusion/#conclusion","title":"Conclusion","text":"<p>Thank you for participating in the workshop!</p> <p>That brings us to the conclusion of this workshop. We've navigated the landscape of continuous integration and deployment using Tekton and ArgoCD, all within the reliable infrastructure provided by Equinix Metal. We've delved into the intricacies of setting up and managing a robust environment, deployed an engaging web application, and experienced firsthand the power of these tools in a harmonious CI/CD pipeline.</p> <p>ArgoCD, acting as the reliable manager of deployments, and Tekton, serving as the dependable facilitator of continuous integration, have demonstrated their exceptional ability to automate and manage deployments. Their adaptability, combined with the solid foundation of Equinix Metal, offer a solution that can smoothly adjust to meet evolving needs.</p> <p>Remember, you\u2019ve just begun to explore the vast realm of CI/CD pipelines. You\u2019ve gotten a taste of how these tools can harmoniously work together on Equinix Metal, creating a productive and scalable CI/CD system.</p>"},{"location":"parts/conclusion/#next-steps","title":"Next Steps","text":"<p>See what fun things you can come up for your CI with Tekton or CD with ArgoCD.</p>"},{"location":"parts/conclusion/#resources","title":"Resources","text":"<p>Here are a few other resources to look at to continue your CI journey with Equinix Metal:</p> <ul> <li>https://cluster-api.sigs.k8s.io</li> <li>https://github.com/kubernetes-sigs/cluster-api-provider-packet/tree/main</li> <li>https://metallb.universe.tf</li> <li>https://argo-cd.readthedocs.io</li> <li>https://github.com/tektoncd/pipeline</li> <li>https://pipelinesascode.com</li> <li>https://github.com/bnallapeta/logo-revelio</li> </ul>"},{"location":"parts/part1/","title":"1. Setup","text":""},{"location":"parts/part1/#part-1-setup","title":"Part 1: Setup","text":"<p>We're going to start by setting up Kubernetes on Equinix Metal with the help of the Cluster API. We'll also incorporate MetalLB for load balancing, ensuring that we have provision to assign external IPs. Post that, we will jump into installing Argocd, Tekton, Pipelines as Code and finally the application deployment.</p>"},{"location":"parts/part1/#steps","title":"Steps","text":"<ul> <li> <p>k8s on metal: To get Kubernetes on board with Equinix Metal, here's the blueprint from their quick start guide. The link contains customized instructions for our Equinix Metal clusters, making it a lot easier.</p> <p>Eager for more? The source repo for the Cluster API Provider Packet is a wealth of knowledge - kubernetes-sigs/cluster-api-provider-packet: https://github.com/kubernetes-sigs/cluster-api-provider-packet/tree/main. From code and docs to tests, it's a comprehensive guide to everything you need.</p> </li> <li> <p>metallb as Loadbalancer: Once we've got our Kubernetes cluster up and running, it's time to deploy MetalLB. Use this guide for a straightforward installation. </p> <p>Note: Manifest method tends to work best - https://metallb.universe.tf/installation/#installation-by-manifest.</p> </li> <li> <p>You need to manually update the secret 'metal-cloud-config' to add a couple of annotations. This is to make sure that metallb assigns external IPs to our services. </p> <p>a. echo '{\"apiKey\": \"xxxxxxxxxxxxxxxxxxxxx\",\"projectID\": \"56565446-8850c-sadfsd-235435-sadfsadg\", \"loadbalancer\":\"metallb:///?crdConfiguration=true\", \"metro\":\"da\"}' | base64 -w0     This will give you a base64 encoded string. b. Get the secret into a yaml file: kubectl get secret/metal-cloud-config -n kube-system -o yaml &gt; metal-cloud-config.yaml     Replace the content under .data.cloud-sa.json with the string from step 1. c. Apply the secret: kubectl apply -f metal-cloud-config.yaml d. Restart the daemonset so that it can take in the new secret.      kubectl -n kube-system rollout restart ds/cloud-provider-equinix-metal</p> </li> </ul> <p>Before moving on to our application (logo-revelio), we require some important tools that are the focus of this workshop - Tekton and ArgoCD.</p> <ul> <li> <p>Setting up ArgoCD and Tekton are quite straightforward. Follow the instructions from their respective websites. Essentially, its running one \u201ckubectl apply -f \u201d command on their release.yaml files.</p> </li> <li> <p>Setup Pipelines as Code:</p> </li> </ul> <p>a. Much like Argo and Tekton, you can run the kubectl install -f on their release.yaml    b. Additionally, we'll set up a Github app, allowing PaC to monitor the repository for Pull Requests/Push events.    c. Follow the instructions from this link where you can either set up the app from the Github GUI. Or, simply install the \u201ctkn pac\u201d utility and you can set up the whole app quite easily.</p> <ul> <li>With our cluster prepped and our toolkit ready, we can finally focus on our application - Logo Revelio. Go ahead and deploy logo-revelio by following the instructions from the Readme. It's as simple as running a 'kubectl apply -f' on the ArgoCD app. This will get the app resources deployed to the cluster and we're off!</li> </ul>"},{"location":"parts/part1/#discussion","title":"Discussion","text":"<p>Before proceeding to the next part let's take a few minutes to discuss what we did. Here are some questions to start the discussion.</p> <ul> <li>We setup kubernetes on Equinix Metal using Cluster API.</li> <li>We setup metallb as our loadbalancer.</li> <li>We setup Argocd and Tekton for our CI/CD needs.</li> <li>We setup our application Logo Revelio on the cluster.</li> </ul> <p>Now, we are all set to explore the powerful capabilities of Tekton, ArgoCD, and how they seamlessly integrate with Equinix Metal.</p>"},{"location":"parts/part2/","title":"2. Application","text":""},{"location":"parts/part2/#part-2-application","title":"Part 2: Application","text":"<ol> <li> <p>Introduction: The Web Application and its Features:     Welcome to the application phase of our workshop. Our focus here is a web application, built on the Go's Gin Gonic framework, featuring a game that challenges your logo identification skills. The application is backed by an integrated SQLite database and keeps things exciting with a leaderboard to track the highest scores. Think of it as a fun, interactive tech quiz that also serves as a practical demonstration of our tools in action.</p> </li> <li> <p>ArgoCD: The Diligent Manager:     ArgoCD, as we discussed in the setup stage, is like the diligent stage manager of our deployment process, constantly monitoring and reconciling changes between the Git repository and the live cluster. With ArgoCD in the picture, any committed change in Git is automatically detected, leading to the creation of a new pod based on the updated image tag. It\u2019s like having a tireless watchdog that ensures our live cluster is always in sync with our Git repository.</p> <p>ArgoCD also offers deployment flexibility. You can switch the branch that ArgoCD tracks with ease. So, when it's time to create a release branch in your Git repository, you simply update the branch name in the Argo Application YAML. This allows you to deploy the updated app to your actual cluster, while you continue to develop on the main branch. ArgoCD takes care of the rest, automatically picking up any updates to the release branch, ensuring your application stays up-to-date on the cluster.</p> </li> <li> <p>Tekton: The Meticulous Craftsman:     Tekton, on the other hand, plays the role of a meticulous craftsman, taking care of the continuous integration aspect. Whenever changes are committed to the repository, Tekton springs into action, triggering the building of a new image based on the latest commit, as well as an update to the deployment image tag to match the latest image tag. Tekton ensures that our application is always running the latest and greatest version, much like a skilled artisan constantly refining their masterpiece.</p> </li> <li> <p>The Power of Integration: ArgoCD and Tekton in a CI/CD Pipeline:      Together, Tekton and ArgoCD form a CI/CD pipeline that's not only efficient but also robust. While the initial setup might feel like assembling a complex puzzle, the end result is a powerful, automated, and adaptive system that's well worth the effort. Moreover, the modular nature of this setup allows for easy expansion with additional pipelines. Imagine being able to introduce an end-to-end test pipeline that's triggered with every PR\u2014it's like adding a new, valuable piece to your automation toolkit with minimal fuss.</p> </li> </ol>"},{"location":"parts/part2/#discussion","title":"Discussion","text":"<ul> <li>Introduction to the web application built on the Gin framework.</li> <li>Role of ArgoCD as a stage manager for deployment.</li> <li>Role of Tekton in continuous integration.</li> <li>Integration of ArgoCD and Tekton in a CI/CD pipeline.</li> <li>Scalability and modularity of the setup.</li> <li>Deployment flexibility with ArgoCD.</li> </ul>"}]}